/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { MeshStandardMaterial } from 'three';
import React, {useContext, useEffect, useRef} from 'react';
import { useGLTF } from '@react-three/drei';
import { animated, useSpring } from 'react-spring/three';
import { useLoader, useThree} from 'react-three-fiber';
import {BridgeContext} from "../../context/bridge-context";


export default function Model(props) {

  const boxContext = useContext(BridgeContext);

  const group = useRef();
  const { nodes, materials } = useGLTF('assets/box.gltf');

  const modelProps = useSpring({
    scale: [boxContext.box.width / 100, boxContext.box.height / 100, boxContext.box.length / 100]

  });

    const texture = useLoader(THREE.TextureLoader, boxContext.box?.material?.texture ? boxContext.box.material?.texture : `assets/Cardboard_Color.jpg`);
    const normalTexture = useLoader(THREE.TextureLoader,`assets/Cardboard_Normal.jpg`);


  texture.repeat.set(boxContext.box.textureScaleY/1000,boxContext.box.textureScaleX/1000);
  texture.offset.set(boxContext.box.textureOffsetY/1000,boxContext.box.textureOffsetX/1000);


  texture.flipY = normalTexture.flipY = false;
  texture.encoding = 3001;
  texture.format = normalTexture.format = 1022;
  texture.matrix.elements = [1, -0, 0, 0, 1, 0, 0, 0, 1];
  texture.minFilter = normalTexture.minFilter = 1005;
  texture.wrapS = normalTexture.wrapS = 1000;
  texture.wrapT = normalTexture.wrapT = 1000;

  const material = new MeshStandardMaterial({
    ...materials.Material,
    map: texture,
    normalMap: normalTexture,
    color: boxContext.box.color && boxContext.box.color
  });

  const camera = useThree((state) => state)
  useEffect(()=>{
    boxContext.setBox({...boxContext.box,previewImg: camera.gl.domElement.toDataURL()})

  },[props.click])
  return (
    <group ref={group} {...boxContext} dispose={null}>
      <animated.mesh
        gl={{ preserveDrawingBuffer: true }}
        scale={modelProps.scale}
        material={material}
        geometry={nodes.Cube.geometry}
        castShadow
      />
    </group>
  );
}

useGLTF.preload('assets/box.gltf');
