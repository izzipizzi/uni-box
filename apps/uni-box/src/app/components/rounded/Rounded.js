/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useContext, useEffect, useRef, useState} from 'react'
import {useGLTF} from '@react-three/drei'
import {animated, useSpring} from 'react-spring/three'
import {MeshStandardMaterial} from "three";
import {useLoader, useThree} from 'react-three-fiber';
import * as THREE from 'three';
import { API } from '../../constatnts';
import {BridgeContext} from "../../context/bridge-context";


export default function Rounded(props) {
  const group = useRef()
  const boxContext = useContext(BridgeContext);

  const {nodes, materials} = useGLTF('assets/rounded.gltf')
  const modelProps = useSpring({
    scale:  [boxContext.box.width / 100, boxContext.box.height / 100, boxContext.box.length / 100]
  })

  const texture = useLoader(THREE.TextureLoader, boxContext.box?.material?.texture ? boxContext.box.material?.texture : `assets/Cardboard_Color.jpg`);
  const normalTexture = useLoader(THREE.TextureLoader, `assets/Cardboard_Normal.jpg`);


  texture.repeat.set(boxContext.box.textureScaleY/1000,boxContext.box.textureScaleX/1000);
  texture.offset.set(boxContext.box.textureOffsetY/1000,boxContext.box.textureOffsetX/1000);
  texture.rotation = boxContext.box.textureRotation/100


  texture.flipY = normalTexture.flipY = true;
  texture.encoding = 3001;
  texture.format = normalTexture.format = 1022;
  texture.matrix.elements = [1, -0, 0, 0, 1, 0, 0, 0, 1];
  texture.minFilter = normalTexture.minFilter = 1005;
  texture.wrapS = normalTexture.wrapS = 3000;
  texture.wrapT = normalTexture.wrapT = 2000;

  const material = new MeshStandardMaterial({
    ...materials.Material,
    map: texture,
    normalMap: normalTexture,
    color: boxContext.box.color && boxContext.box.color
  });

  // const material = new MeshStandardMaterial({...materials['Material.001'], color: boxContext.box.color && boxContext.box.color });

  const camera = useThree((state) => state)
  useEffect(()=>{
    boxContext.setBox({...boxContext.box,previewImg: camera.gl.domElement.toDataURL()})

  },[props.click])
  return (
    <group ref={group} {...boxContext} dispose={null}>
      <animated.mesh
        gl={{ preserveDrawingBuffer: true }}
        scale={modelProps.scale}
        material={material}
        geometry={nodes.Cylinder.geometry}
        castShadow/>
    </group>
  )
}

useGLTF.preload('assets/rounded.gltf')
